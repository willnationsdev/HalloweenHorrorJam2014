<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerHuman</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isMoveLeft = 0;
isMoveRight = 0;
isMoveUp = 0;
isMoveDown = 0;
isOnGridH = false;
isOnGridV = false;
playerSpeed = 6;
lantern = instance_create(x,y,obj_lanternLight);
lightOn = true;
lastdir = vk_space;
hasKey = false;
image_speed = 0;
image_index = 1;
stepping = false;
stepsID = 0;
isntMoving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//matches image to direction
image_angle = direction;

//track lantern light with player - am actually assigning playerspeed 
//to lanternspeed. Don't quite know why this works yet.
with(obj_lanternLight) {
    other.hspeed = hspeed;
    other.vspeed = vspeed;
}

//Toggle lantern light
if(keyboard_check_pressed(vk_alt)) lightOn = !lightOn;

if speed &gt; 0 //if moving (and not attempting to move continously in one direction)
{
    //if no key is pressed and moving, stop moving @ grid
    if(place_snapped(64,64) &amp;&amp; !(keyboard_check(vk_left) || keyboard_check(vk_right))) {
        hspeed = 0;
    }
    if(place_snapped(64,64) &amp;&amp; !(keyboard_check(vk_up) || keyboard_check(vk_down))) {
        vspeed = 0;
    }
    
    //if key is pressed and we are moving in the opposite direction, reverse direction
    if(place_snapped(64,64) &amp;&amp; ((keyboard_check(vk_left)) &amp;&amp; hspeed &gt; 0)) {
        hspeed = -playerSpeed;
    }
    if(place_snapped(64,64) &amp;&amp; ((keyboard_check(vk_right)) &amp;&amp; hspeed &lt; 0)) {
        hspeed = playerSpeed;
    }
    if(place_snapped(64,64) &amp;&amp; ((keyboard_check(vk_up)) &amp;&amp; vspeed &gt; 0)) {
        vspeed = -playerSpeed;
    }
    if(place_snapped(64,64) &amp;&amp; ((keyboard_check(vk_down)) &amp;&amp; vspeed &lt; 0)) {
        vspeed = playerSpeed;
    }
}
else //Otherwise, allow keyboard presses potentially establishing new directionality
{
    if      (keyboard_check(vk_up)    &amp;&amp; !place_meeting(x,y-8,obj_block)) vspeed = -playerSpeed;
    else if (keyboard_check(vk_down)  &amp;&amp; !place_meeting(x,y+8,obj_block)) vspeed =  playerSpeed;
    else if (keyboard_check(vk_left)  &amp;&amp; !place_meeting(x-8,y,obj_block)) hspeed = -playerSpeed;
    else if (keyboard_check(vk_right) &amp;&amp; !place_meeting(x+8,y,obj_block)) hspeed =  playerSpeed;
}

//animate sprite
if((vspeed == 0 &amp;&amp; hspeed == 0)) {
    image_speed = 0;
    image_index = 1;
    stepping = false;
    audio_stop_sound(snd_playerFootsteps);
}
else {
    if(!stepping) {
        image_index = 0;
        audio_play_sound(snd_playerFootsteps,15,true);
        stepping = true;
    }
    image_speed = .15;
}
    

if(keyboard_check_pressed(vk_space)) {

    //detect distance to nearest door and add behaviors if close enough
    door = instance_nearest(x,y,obj_door);
    with(door) {
        if(distance_to_object(obj_player) &lt; 8) {
            if(openable) {
                if(!isOpen) {
                    if(!locked) {
                        image_angle = 90;
                        audio_play_sound(snd_doorOpen,11,false);
                        isOpen = true;
                        alarm[0] = 90;
                    }
                    else {
                        if(other.hasKey) {
                            if(object_index == obj_exitDoor) {
                                with(obj_exitDoor) {
                                    image_angle = 90;
                                    audio_play_sound(snd_success,15,false);
                                    alarm[1] = 120
                                }
                            }
                        }
                        else audio_play_sound(snd_doorLocked,11,false);
                    }
                }             
            }
        }
    }
    
    //destroy and collect the key if the player selects to pick it up
    if(distance_to_object(obj_key) &lt; 8) {
        audio_play_sound(snd_keyPickup,11,false);
        with(instance_nearest(x,y,obj_key))
            instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
